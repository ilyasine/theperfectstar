

@mixin clearfix() {
    &:before,
    &:after {
      content: " "; /* 1 */
      display: table; /* 2 */
    }
    &:after {
      clear: both;
    }
  }
  
  // WebKit-style focus
  @mixin tab-focus() {
    // Default
    outline: thin dotted #333;
    // WebKit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
  }
  
  // Center-align a block level element
  @mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
  
  // Sizing shortcuts
  @mixin size($width, $height) {
    width: $width;
    height: $height;
  }
  @mixin square($size) {
    @include size($size, $size);
  }
  
  // Placeholder text
  @mixin placeholder($color: $input-color-placeholder) {
    &:-moz-placeholder            { color: $color; } // Firefox 4-18
    &::-moz-placeholder           { color: $color; } // Firefox 19+
    &:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
    &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
  }
  
  // Text overflow
  // Requires inline-block or block for proper styling
  @mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  // CSS image replacement
  //
  // Heads up! v3 launched with with only `@mixin hide-text()`, but per our pattern for
  // mixins being reused as classes with the same name, this doesn't hold up. As
  // of v3.0.2 we have added `@mixins text-hide()` and deprecated `@mixin hide-text()`.
  // Note that we cannot chain the mixins together in SCSS, so they are repeated.
  //
  // Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
  
  // Deprecated as of v3.0.2 (will be removed in v4)
  @mixin hide-text() {
    font: unquote("0/0") a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }
  // New mixin to use as of v3.0.2
  @mixin text-hide() {
    font: unquote("0/0") a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
  }
  
  @mixin show() {
    display: block !important;
  }
  
  @mixin hidden() {
    display: none !important;
    visibility: hidden !important;
  }
  
  // CSS3 PROPERTIES
  // --------------------------------------------------
  
  // Single side border-radius
  @mixin border-radius($radius) {
      -webkit-border-radius: $radius;
      -moz-border-radius: $radius;
      -khtml-border-radius: $radius;
      border-radius: $radius;
  }
  @mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
     border-top-left-radius: $radius;
  }
  @mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
       border-top-right-radius: $radius;
  }
  @mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
     border-bottom-left-radius: $radius;
  }
  @mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
       border-top-left-radius: $radius;
  }
  
  // Drop shadows
  @mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow; // i-o-s <4.3 & Android <4.1
            box-shadow: $shadow;
  }
  
  // Transitions
  @mixin transition($transition) {
    -webkit-transition: $transition;
            transition: $transition;
  }
  @mixin transition-property($transition-property) {
    -webkit-transition-property: $transition-property;
            transition-property: $transition-property;
  }
  @mixin transition-delay($transition-delay) {
    -webkit-transition-delay: $transition-delay;
            transition-delay: $transition-delay;
  }
  @mixin transition-duration($transition-duration) {
    -webkit-transition-duration: $transition-duration;
            transition-duration: $transition-duration;
  }
  @mixin transition-transform($transition) {
    -webkit-transition: -webkit-transform $transition;
       -moz-transition: -moz-transform $transition;
         -o-transition: -o-transform $transition;
            transition: transform $transition;
  }
  
  // Transformations
  @mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
        -ms-transform: rotate($degrees); // IE9+
            transform: rotate($degrees);
  }
  @mixin scale($ratio) {
    -webkit-transform: scale($ratio);
        -ms-transform: scale($ratio); // IE9+
            transform: scale($ratio);
  }
  @mixin translate($x, $y) {
    -webkit-transform: translate($x, $y);
        -ms-transform: translate($x, $y); // IE9+
            transform: translate($x, $y);
  }
  @mixin center {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
  @mixin skew($x, $y) {
    -webkit-transform: skew($x, $y);
        -ms-transform: skew-x($x) skew-y($y); // See https://github.com/twbs/bootstrap/issues-/4885; IE9+
            transform: skew($x, $y);
  }
  @mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
            transform: translate3d($x, $y, $z);
  }
  
  @mixin rotateX($degrees) {
    -webkit-transform: rotateX($degrees);
        -ms-transform: rotateX($degrees); // IE9+
            transform: rotateX($degrees);
  }
  @mixin rotateY($degrees) {
    -webkit-transform: rotateY($degrees);
        -ms-transform: rotateY($degrees); // IE9+
            transform: rotateY($degrees);
  }
  @mixin perspective($perspective) {
    -webkit-perspective: $perspective;
       -moz-perspective: $perspective;
            perspective: $perspective;
  }
  @mixin perspective-origin($perspective) {
    -webkit-perspective-origin: $perspective;
       -moz-perspective-origin: $perspective;
            perspective-origin: $perspective;
  }
  @mixin transform-origin($origin) {
    -webkit-transform-origin: $origin;
       -moz-transform-origin: $origin;
            transform-origin: $origin;
  }
  
  // Animations
  @mixin animation($animation) {
    -webkit-animation: $animation;
            animation: $animation;
  }
  
  // Backface visibility
  // Prevent browsers from flickering when using CSS 3D transforms.
  // Default value is `visible`, but can be changed to `hidden`
  @mixin backface-visibility($visibility){
    -webkit-backface-visibility: $visibility;
       -moz-backface-visibility: $visibility;
            backface-visibility: $visibility;
  }
  
  // Box sizing
  @mixin box-sizing($boxmodel) {
    -webkit-box-sizing: $boxmodel;
       -moz-box-sizing: $boxmodel;
            box-sizing: $boxmodel;
  }
  //opacity
  @mixin opacity($opacity) {
    opacity: $opacity;
   filter: alpha(opacity=($opacity * 100));
}
  
  // User select
  // For selecting text on the page
  @mixin user-select($select) {
    -webkit-user-select: $select;
       -moz-user-select: $select;
        -ms-user-select: $select; // IE10+
         -o-user-select: $select;
            user-select: $select;
  }

  @mixin shave($number_lines) {
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: $number_lines;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
}
  
  // Resize anything
  @mixin resizable($direction) {
    resize: $direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
  }

  //flexbox

  @mixin flexbox{
    display:-webkit-box; // old
    display:-moz-box; // old
    display:-ms-flexbox; // ie
    display:-webkit-flex; // new
    display:flex; // new
  }

  @mixin flex($value){
    -webkit-box-flex: $value;
    -ms-flex: $value;
    flex: $value;
  }

  //flex direction
  @mixin flex-direction($direction){
    @if $direction == column {
        -webkit-flex-direction:vertical;
        -moz-flex-direction:vertical;
        -ms-flex-direction:column;
        -webkit-flex-direction:column;
        flex-direction:column;
    }
    @else{
        -webkit-flex-direction:horizontal;
        -moz-flex-direction:horizontal;
        -ms-flex-direction:row;
        -webkit-flex-direction:row;
        flex-direction:row;
        }
    }

  //responsive

  @mixin mobile {
    @media screen and (max-width:767px){
        @content;
    }
  }
  @mixin tablet {
    @media screen and (max-width:1000px){
        @content;
    }
  }
  @mixin responsive($value) {
    @media screen and (max-width:$value){
        @content;
    }
  }

  @mixin afterBg {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }

  // Define a mixin for the mobile visibility
  @mixin mobile-only {
    @media only screen and (min-width: 801px) {
        display: none !important; // Set to 'none' on larger screens
    }
  }

  // Define a mixin for desktop visibility
  @mixin desktop-only {
    @media only screen and (max-width: 800px) {
        display: none !important; 
    }
  }
