<?php


defined( 'ABSPATH' ) || exit;  // Exit if accessed directly

/* if( ! is_plugin_active( 'woocommerce/woocommerce.php' ) || ! is_plugin_active( 'woocommerce-smart-coupons/woocommerce-smart-coupons.php' )){
    return;
}

if(  is_plugin_active( 'woocommerce-smart-coupons/woocommerce-smart-coupons.php' ) ){
    require_once WP_PLUGIN_DIR . '/woocommerce-smart-coupons/includes/class-wc-sc-display-coupons.php';    
}
 */
/**
 ** Start TPRM_membership_email Class*
 */

 if( !class_exists("TPRM_membership_email") ) {

    class TPRM_membership_email{ 
    
        private static $instance = null;

        function __construct(){
            add_action('init', array( $this, 'remove_WC_SC_coupon_email' ), 10, 3 );
            add_filter('woocommerce_email_body_text', array( $this, 'TPRM_woocommerce_email_body_text' ),  10, 3);
            add_action('woocommerce_email_order_details_license', array( $this, 'TPRM_generated_coupon_details_after_order_table' ), 10, 3 );
            add_action('woocommerce_email_order_details_license_for_admin', array( $this, 'TPRM_generated_coupon_details_after_order_table_for_admin' ), 10, 3 );        
            add_action('woocommerce_email', array( $this, 'TPRM_disable_mobile_messaging') );                  
            add_action('woocommerce_email_order_details', array( $this, 'TPRM_remove_email_order_details_for_activation'), 5, 4 );
            add_action('woocommerce_email_customer_details', array( $this, 'TPRM_remove_email_order_details_for_activation'), 5, 4 );         
            add_action('woocommerce_email_footer', array( $this, 'TPRM_woocommerce_footer')); 
            add_filter('woocommerce_email_after_order_details', array( $this, 'TPRM_order_details_head'), 10, 3 );

            add_filter('woocommerce_email_heading_customer_completed_order', array( $this, 'completed_order_email_heading' ),  10, 2);
            add_filter('woocommerce_email_heading_new_order', array( $this, 'new_order_email_heading' ),  10, 2);
            add_filter('woocommerce_email_subject_customer_completed_order', array( $this, 'order_complete_customer_email_subject'), 10, 2 );
            add_filter('woocommerce_email_subject_new_order', array( $this, 'new_order_admin_email_subject'), 10, 2 );

            add_filter('woocommerce_email_styles', array( $this, 'TPRM_enqueue_woocommerce_email_style'));
            add_filter('woocommerce_email_footer_text', array( $this, 'TPRM_replace_placeholders' ) );    
            //add_filter('woocommerce_email_order_meta_fields', array( $this, 'school_details_email_order_meta_fields', 10, 3) );
            
			//add_action('woocommerce_checkout_update_user_meta',array( $this, 'save_ecole_classe_checkout_fields_to_user_meta'));
            add_action('woocommerce_email_school_details', array( $this, 'show_school_details_email_order_meta'), 5, 4 );   

            add_action('woocommerce_school_details_after_customer_details', array($this, 'display_order_school_details_on_thankyou_page'), 10, 2);         
        }


        /**
		 * Get single instance of TPRM_membership_coupon class
		 *
         * @since V2
         * @access public
		 * @return TPRM_membership_coupon Singleton object of TPRM_membership_coupon
		 */
		public static function get_instance() {
			// Check if instance is already exists.
			if ( is_null( self::$instance ) ) {
				self::$instance = new self();
			}

			return self::$instance;
		}


        /**
         * Remove coupon box generated by WC_SC
         *
         * @since V2
         * @access public
         * @return Void
         */

         function remove_WC_SC_coupon_email() {
            if (class_exists('WC_SC_Display_Coupons')) {
                // Get the instance of MyClass
                $WC_SC_class = WC_SC_Display_Coupons::get_instance();
        
                // Remove the action hook
                remove_action('woocommerce_email_after_order_table', array($WC_SC_class, 'generated_coupon_details_after_order_table' ), 10, 3 );

            }
        }

        /**
         * Remove order details for activation
         *
         * @since V2
         * @access public
         * @return Void
         */
        public function TPRM_remove_email_order_details_for_activation( $order, $sent_to_admin, $plain_text, $email ){
            // get the instance of the WC_Emails class
            $mailer = WC()->mailer(); 

            $product = $this->access_or_license( $order );
            if($product === "access" && $email->id == 'customer_completed_order'){
                remove_action( 'woocommerce_email_customer_details', array( $mailer, 'customer_details' ), 10, 3 );
                remove_action( 'woocommerce_email_order_details', array( $mailer, 'order_details' ), 10, 4 );
                remove_action( 'woocommerce_email_customer_details', array( $mailer, 'email_addresses' ), 20, 3 );              
            }
        }


        /**
         * Replace placeholder text in strings.
         *
         * @since  3.7.0
         * @param  string $string Email footer text.
         * @return string         Email footer text with any replacements done.
         */
        public function TPRM_replace_placeholders( $string ) {
            $domain = wp_parse_url( home_url(), PHP_URL_HOST );

            return str_replace(
                array(
                    '{site_title}',
                    '{site_address}',
                    '{site_url}',
                ),
                array(
                   // wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES ),
                    wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES ),
                    $domain,
                    $domain,
                ),
                $string
            );
        }

        /**
         *  Custom Text for completed order customer email subject
         *
         * @since V2
         * @access public
         * @return String
         */

        public function order_complete_customer_email_subject( $subject, $order ) {

            $product = $this->access_or_license( $order );

            if($product === "access"){
                $subject =  __( 'Congratulations, Account activated !', 'TPRM_-membership-coupon' );
            }else{
                $subject =  __( 'License code Received from tepunareomaori', 'TPRM_-membership-coupon' );
            }

            return $subject;
        }

        /**
         *  Custom Text for new order admin email subject
         *
         * @since V2
         * @access public
         * @return String
         */

        public function new_order_admin_email_subject( $subject, $order ) {

            $product = $this->access_or_license( $order );

            if($product === "license"){
                $subject = __( 'New License code generated', 'TPRM_-membership-coupon' );
            }else{
                $subject = __( 'New Account Activated', 'TPRM_-membership-coupon' );
            }

            return $subject;
        }

        /**
         *  Custom Text for completed order customer email head
         *
         * @since V2
         * @access public
         * @return String
         */

        public function completed_order_email_heading( $email_heading, $order ) {

            $product = $this->access_or_license( $order );

            if($product === "access"){
                $email_heading =  __('Account activated !', 'TPRM_-membership-coupon' );
            }else{
                $email_heading =  __('License code Received from tepunareomaori', 'TPRM_-membership-coupon' );
            }
                   
            return $email_heading;
        }

        /**
         *  Custom Text for new order admin email head
         *
         * @since V2
         * @access public
         * @return String
         */

        public function new_order_email_heading( $email_heading, $order ) {

            $product = $this->access_or_license( $order );

            if($product === "license"){
                $email_heading = sprintf( esc_html__( 'New License code generated for %s', 'TPRM_-membership-coupon' ), $order->get_formatted_billing_full_name() );              
            }else{
                $email_heading = sprintf( esc_html__( 'New Account Activated', 'TPRM_-membership-coupon' ), $order->get_formatted_billing_full_name() );
            }
                   
            return $email_heading;
        }

        /**
         *  Custom Text for woocommerce email body
         *
         * @since V2
         * @access public
         * @return String
         */

        public function TPRM_woocommerce_email_body_text( $text, $order, $email ) {
           
            $product = $this->access_or_license( $order );

            // for customer
            if( $email->id === 'customer_completed_order' ){
                if($product === "license"){
                    $text =  sprintf( esc_html__( 'Youâ€™ve received a License code from tepunareomaori .', 'TPRM_-membership-coupon' ) );        
                }else{
                    $text = '<p>' .  __( 'Congratulations!', 'TPRM_-membership-coupon' ) .'</p>';
                    $text .= '<p>' . __( 'Your tepunareomaori account has been successfully activated.', 'TPRM_-membership-coupon' ).'</p>';
                    $text .= '<p>' . __( 'You can access to your Dashboard via the following link : ', 'TPRM_-membership-coupon' ).'</p>';              
                    $text .='<p><a href="' . home_url('/dashboard/') . '" target="_blank" class="dashboard-page">' . __('Access' , 'TPRM_-membership-coupon' ) . '</a></p>';
                }
            }// for admin
            elseif($email->id === 'new_order'){
                if($product === "license"){
                    $text = '<p>' . sprintf( esc_html__( 'New License code has been generated for %s', 'TPRM_-membership-coupon' ), $order->get_formatted_billing_full_name() ).'</p>';
                    $text .='<p>' . __( 'Below are the details of the order:', 'TPRM_-membership-coupon' ).'</p>';
                }else{
                    $text = '<p>' . sprintf( esc_html__( 'New tepunareomaori account has been successfully activated .', 'TPRM_-membership-coupon' ) ).'</p>';
                }
            }
                   
            return $text;
        }
        
        /**
         *  Custom Text for order details heading
         *
         * @since V2
         * @access public
         * @return String
         */

        public function TPRM_order_details_head( $details_head, $order, $email ) {
           
            $product = $this->access_or_license( $order );

            if($product === "access" && $email->id == 'new_order'){
                
                $details_head = __( 'The details of the order are as follows :', 'TPRM_-membership-coupon' );
               
            }elseif($product === "license" && $email->id == 'customer_completed_order'){

                $details_head = __( 'The details of your order are as follows :', 'TPRM_-membership-coupon' );

            }
                   
            return $details_head;
        }


        /**
		 * Display generated coupons details after Order table
		 *
		 * @param  WC_Order $order         The order.
		 * @param  boolean  $sent_to_admin Whether sent to admin.
		 * @param  boolean  $plain_text    Whether a plain text email.
		 */
		public function TPRM_generated_coupon_details_after_order_table( $order = false, $sent_to_admin = false, $plain_text = false ) {
            if (class_exists('WC_SC_Display_Coupons')) {
                $WC_SC_class = WC_SC_Display_Coupons::get_instance();
                if ( $WC_SC_class->is_wc_gte_30() ) {
                    $order_id      = ( is_object( $order ) && is_callable( array( $order, 'get_id' ) ) ) ? $order->get_id() : 0;
                    $order_refunds = ( ! empty( $order ) && is_callable( array( $order, 'get_refunds' ) ) ) ? $order->get_refunds() : array();
                } else {
                    $order_id      = ( ! empty( $order->id ) ) ? $order->id : 0;
                    $order_refunds = ( ! empty( $order->refunds ) ) ? $order->refunds : array();
                }

                if ( ! empty( $order_refunds ) ) {
                    return;
                }

                if ( ! empty( $order_id ) ) {
                    $this->get_generated_TPRM_coupon_data( $order_id, '', true, true );
			    }
            }
		}

        /**
		 * Display generated coupons details after Order table
		 *
		 * @param  WC_Order $order         The order.
		 * @param  boolean  $sent_to_admin Whether sent to admin.
		 * @param  boolean  $plain_text    Whether a plain text email.
		 */
		public function TPRM_generated_coupon_details_after_order_table_for_admin( $order = false, $sent_to_admin = false, $plain_text = false ) {
            if (class_exists('WC_SC_Display_Coupons')) {
                $WC_SC_class = WC_SC_Display_Coupons::get_instance();
                if ( $WC_SC_class->is_wc_gte_30() ) {
                    $order_id      = ( is_object( $order ) && is_callable( array( $order, 'get_id' ) ) ) ? $order->get_id() : 0;
                    $order_refunds = ( ! empty( $order ) && is_callable( array( $order, 'get_refunds' ) ) ) ? $order->get_refunds() : array();
                } else {
                    $order_id      = ( ! empty( $order->id ) ) ? $order->id : 0;
                    $order_refunds = ( ! empty( $order->refunds ) ) ? $order->refunds : array();
                }

                if ( ! empty( $order_refunds ) ) {
                    return;
                }

                if ( ! empty( $order_id ) ) {
                    $this->get_generated_TPRM_coupon_data_for_admin( $order_id, '', true, true );
			    }
            }
		}
        
        /**
         *  Disable messages about the mobile apps in WooCommerce emails.
         *
         * @since V2
         * @access public
         * @return Void
         */
        function TPRM_disable_mobile_messaging( $mailer ) {
            remove_action( 'woocommerce_email_footer', array( $mailer->emails['WC_Email_New_Order'], 'mobile_messaging' ), 9 );
        }

        /**
         *  Enqueue the custom style for WooCommerce emails
         *
         * @since V2
         * @access public
         * @return String
         */
        public function TPRM_enqueue_woocommerce_email_style( $css ) {
        
            $arrContextOptions=array(
                "ssl"=>array(
                    "verify_peer"=>false,
                    "verify_peer_name"=>false,
                ),
            );
        
            $css .=  file_get_contents( TPRM_MEM_CO_CSS . 'email.css' ,false, stream_context_create($arrContextOptions));
        
            return $css;
        }
   
        /**
		 * Fetch generated coupon's details
		 *
		 * Either order_ids or user_ids required
		 *
		 * @param array|int $order_ids Order IDs.
		 * @param array|int $user_ids User IDs.
		 * @param boolean   $html Whether to return only data or html code, optional, default:false.
		 * @param boolean   $header Whether to add a header above the list of generated coupon details, optional, default:false.
		 * @param string    $layout Possible values 'box' or 'table' layout to show generated coupons details, optional, default:box.
		 *
		 * @return array $generated_coupon_data associative array containing generated coupon's details
		 */
		public function get_generated_TPRM_coupon_data( $order_ids = '', $user_ids = '', $html = false, $header = false, $layout = 'box' ) {
			global $wpdb;
            if (class_exists('WC_SC_Display_Coupons')) {
             
                $WC_SC_class = WC_SC_Display_Coupons::get_instance();
               

                if ( ! is_array( $order_ids ) ) {
                    $order_ids = ( ! empty( $order_ids ) ) ? array( $order_ids ) : array();
                }

                if ( ! is_array( $user_ids ) ) {
                    $user_ids = ( ! empty( $user_ids ) ) ? array( $user_ids ) : array();
                }

                $user_order_ids = array();

                if ( ! empty( $user_ids ) ) {

                    if ( $WC_SC_class->is_hpos() ) {
                        $user_order_ids_query = $wpdb->prepare(
                            "SELECT DISTINCT id FROM {$wpdb->prefix}wc_orders
                                WHERE %d
                                    AND customer_id",
                            1
                        );
                    } else {
                        $user_order_ids_query = $wpdb->prepare(
                            "SELECT DISTINCT postmeta.post_id FROM {$wpdb->prefix}postmeta AS postmeta
                                WHERE postmeta.meta_key = %s
                                AND postmeta.meta_value",
                            '_customer_user'
                        );
                    }

                    if ( count( $user_ids ) === 1 ) {
                        $user_order_ids_query .= $wpdb->prepare( ' = %d', current( $user_ids ) );
                    } else {
                        $how_many              = count( $user_ids );
                        $placeholders          = array_fill( 0, $how_many, '%d' );
                        $user_order_ids_query .= $wpdb->prepare( ' IN ( ' . implode( ',', $placeholders ) . ' )', $user_ids ); // phpcs:ignore
                    }

                    $unique_user_ids = array_unique( $user_ids );

                    $user_order_ids = wp_cache_get( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ), 'woocommerce_smart_coupons' );

                    if ( false === $user_order_ids ) {
                        $user_order_ids = $wpdb->get_col( $user_order_ids_query ); // phpcs:ignore
                        wp_cache_set( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ), $user_order_ids, 'woocommerce_smart_coupons' );
                        $WC_SC_class->maybe_add_cache_key( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ) );
                    }
                }

                $new_order_ids = array_unique( array_merge( $user_order_ids, $order_ids ) );

                $TPRM_order_id = array();

                $generated_coupon_data = array();
                foreach ( $new_order_ids as $id ) {
                    $order                      = function_exists( 'wc_get_order' ) ? wc_get_order( $id ) : null;
                    $is_callable_order_get_meta = $WC_SC_class->is_callable( $order, 'get_meta' );
                    $data                       = ( true === $is_callable_order_get_meta ) ? $order->get_meta( 'sc_coupon_receiver_details' ) : get_post_meta( $id, 'sc_coupon_receiver_details', true );
                    if ( empty( $data ) ) {
                        continue;
                    }
                    $from = ( true === $is_callable_order_get_meta ) ? $order->get_billing_email() : get_post_meta( $id, '_billing_email', true );
                    if ( empty( $generated_coupon_data[ $from ] ) ) {
                        $generated_coupon_data[ $from ] = array();
                    }

                    $TPRM_order_id[] = $order->id;
                    
                    $generated_coupon_data[ $from ] = array_merge( $generated_coupon_data[ $from ], $data );
                }

                $backtrace           = debug_backtrace( DEBUG_BACKTRACE_IGNORE_ARGS );  // phpcs:ignore
                $backtrace_functions = wp_list_pluck( $backtrace, 'function' );
                if ( in_array( 'sc_generated_coupon_data_metabox', $backtrace_functions, true ) ) {
                    reset( $order_ids );
                    $order_id   = current( $order_ids );
                    $from       = $WC_SC_class->get_post_meta( $order_id, '_billing_email', true );
                    $coupon_ids = $wpdb->get_col( // phpcs:ignore
                        $wpdb->prepare(
                            "SELECT DISTINCT p.ID
                                FROM {$wpdb->posts} AS p
                                    LEFT JOIN {$wpdb->postmeta} AS pm
                                        ON (p.ID = pm.post_id)
                                WHERE p.post_type = %s
                                    AND p.post_status = %s
                                    AND pm.meta_key = %s
                                    AND (pm.meta_value = %s
                                            OR pm.meta_value = %d )",
                            'shop_coupon',
                            'future',
                            'generated_from_order_id',
                            $order_id,
                            $order_id
                        )
                    );
                    if ( ! empty( $coupon_ids ) && is_array( $coupon_ids ) ) {
                        foreach ( $coupon_ids as $coupon_id ) {
                            $coupon_receiver_details = $WC_SC_class->get_post_meta( $coupon_id, 'wc_sc_coupon_receiver_details', true );
                            $from                    = ( ! empty( $coupon_receiver_details['gift_certificate_sender_email'] ) ) ? $coupon_receiver_details['gift_certificate_sender_email'] : $from;
                            if ( empty( $generated_coupon_data[ $from ] ) || ! is_array( $generated_coupon_data[ $from ] ) ) {
                                $generated_coupon_data[ $from ] = array();
                            }
                            $generated_coupon_data[ $from ][] = array(
                                'code'     => ( ! empty( $coupon_receiver_details['coupon_details']['code'] ) ) ? $coupon_receiver_details['coupon_details']['code'] : '',
                                'amount'   => ( ! empty( $coupon_receiver_details['coupon_details']['amount'] ) ) ? $coupon_receiver_details['coupon_details']['amount'] : 0,
                                'email'    => ( ! empty( $coupon_receiver_details['gift_certificate_receiver_email'] ) ) ? $coupon_receiver_details['gift_certificate_receiver_email'] : '',
                                'message'  => ( ! empty( $coupon_receiver_details['message_from_sender'] ) ) ? $coupon_receiver_details['message_from_sender'] : '',
                                'order_id' => ( ! empty( $order_id ) ) ? $order_id : 0,
                            );
                        }
                    }
                }

                if ( empty( $generated_coupon_data ) ) {
                    return;
                }

                if ( $html ) {

                    ob_start();
                    if ( 'table' === $layout ) {
                        $WC_SC_class->get_generated_coupon_data_table( $generated_coupon_data );
                    } else {
                        $WC_SC_class->get_generated_coupon_data_box( $generated_coupon_data );
                    }
                    $coupon_details_html_content = ob_get_clean();

                    $found_coupon = ( 'table' === $layout ) ? ( strpos( $coupon_details_html_content, 'coupon_received_row' ) !== false ) : ( strpos( $coupon_details_html_content, '<details' ) !== false );

                    if ( $found_coupon && ! empty( $coupon_details_html_content ) ) {

                        echo '<div id="generated_coupon_data_container">';
                        
                        $printcoupon = '';
                        foreach ($TPRM_order_id as $order_id) {

                            $order = new WC_Order( $order_id );

                            foreach ( $order->get_items() as $item_key => $item ) {
    
                                $product = $order->get_product_from_item( $item );
                                
                                $item_sku = $product->get_sku();

                                $coupon = $generated_coupon_data[$from][0]['code'];
                                
                                    //$item_sku = $product->get_sku();
                                    $coupon_img_path = TPRM_MEM_CO_IMG  . $item_sku .'.png';
                                    $howto_img_path = TPRM_MEM_CO_IMG  . $item_sku .'-howto.png';

                                    $activation_url = '';

                                    if ($item_sku === 'license-en') {
                                        $activation_url = site_url('/en/subscription/');
                                    } elseif ($item_sku === 'license-fr') {
                                        $activation_url = site_url('/fr/abonnement/');
                                    }
                                 
                                    $printcoupon .= ' <div class="coupon-container email" >';
                                    $printcoupon .= '   <div class="coupon-container-inner" >';                                 
                                    $printcoupon .= '    <p class="you-lic-code">' . __('Here is your License code :' , 'TPRM_-membership-coupon' ) . '</p>';                                                 
                                    $printcoupon .= '    <div class="code" id="TPRM_-code">' . $coupon . '</div>'; 
                                    $printcoupon .= '   </div>';                                
                                    $printcoupon .= '   <div class="coupon-explain" >';                            
                                    $printcoupon .= '       <p>' . __('This code is strictly personal and confidential and should not be communicated or shared with third parties.' , 'TPRM_-membership-coupon' ) . '</p>';
                                    $printcoupon .= '                     <p class="next-step">';
                                    $printcoupon .=                           __('Next Step : ' , 'TPRM_-membership-coupon' );
                                    $printcoupon .= '                         <span></span>';
                                    $printcoupon .= '                     </p>';
                                    $printcoupon .= '       <p>' . __('To activate your account, kindly copy the license code and navigate to the following ' , 'TPRM_-membership-coupon' ) ; 
                                    if (!empty($activation_url)) {
                                    $printcoupon .= '       <a href="' . esc_url($activation_url) . '" target="_blank" class="sub-page">' . __('Activation Page', 'TPRM_-membership-coupon') . '</a>. <br>';
                                    }
                                    $printcoupon .=         __('Once there, please paste the code into the corresponding field provided and activate your account.' , 'TPRM_-membership-coupon' ) . '</p>'; 
                                    $printcoupon .= '   </div>';
                                    $printcoupon .= ' </div>';
                            }
                        }

                        echo  $printcoupon;                                  

                        echo '</div>';

                    }
                }

				return;

			}

			return $generated_coupon_data;
		}

        /**
		 * Fetch generated coupon's details
		 *
		 * Either order_ids or user_ids required
		 *
		 * @param array|int $order_ids Order IDs.
		 * @param array|int $user_ids User IDs.
		 * @param boolean   $html Whether to return only data or html code, optional, default:false.
		 * @param boolean   $header Whether to add a header above the list of generated coupon details, optional, default:false.
		 * @param string    $layout Possible values 'box' or 'table' layout to show generated coupons details, optional, default:box.
		 *
		 * @return array $generated_coupon_data associative array containing generated coupon's details
		 */
		public function get_generated_TPRM_coupon_data_for_admin( $order_ids = '', $user_ids = '', $html = false, $header = false, $layout = 'box' ) {
			global $wpdb;
            if (class_exists('WC_SC_Display_Coupons')) {
             
                $WC_SC_class = WC_SC_Display_Coupons::get_instance();
               

                if ( ! is_array( $order_ids ) ) {
                    $order_ids = ( ! empty( $order_ids ) ) ? array( $order_ids ) : array();
                }

                if ( ! is_array( $user_ids ) ) {
                    $user_ids = ( ! empty( $user_ids ) ) ? array( $user_ids ) : array();
                }

                $user_order_ids = array();

                if ( ! empty( $user_ids ) ) {

                    if ( $WC_SC_class->is_hpos() ) {
                        $user_order_ids_query = $wpdb->prepare(
                            "SELECT DISTINCT id FROM {$wpdb->prefix}wc_orders
                                WHERE %d
                                    AND customer_id",
                            1
                        );
                    } else {
                        $user_order_ids_query = $wpdb->prepare(
                            "SELECT DISTINCT postmeta.post_id FROM {$wpdb->prefix}postmeta AS postmeta
                                WHERE postmeta.meta_key = %s
                                AND postmeta.meta_value",
                            '_customer_user'
                        );
                    }

                    if ( count( $user_ids ) === 1 ) {
                        $user_order_ids_query .= $wpdb->prepare( ' = %d', current( $user_ids ) );
                    } else {
                        $how_many              = count( $user_ids );
                        $placeholders          = array_fill( 0, $how_many, '%d' );
                        $user_order_ids_query .= $wpdb->prepare( ' IN ( ' . implode( ',', $placeholders ) . ' )', $user_ids ); // phpcs:ignore
                    }

                    $unique_user_ids = array_unique( $user_ids );

                    $user_order_ids = wp_cache_get( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ), 'woocommerce_smart_coupons' );

                    if ( false === $user_order_ids ) {
                        $user_order_ids = $wpdb->get_col( $user_order_ids_query ); // phpcs:ignore
                        wp_cache_set( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ), $user_order_ids, 'woocommerce_smart_coupons' );
                        $WC_SC_class->maybe_add_cache_key( 'wc_sc_order_ids_by_user_id_' . implode( '_', $unique_user_ids ) );
                    }
                }

                $new_order_ids = array_unique( array_merge( $user_order_ids, $order_ids ) );

                $TPRM_order_id = array();

                $generated_coupon_data = array();
                foreach ( $new_order_ids as $id ) {
                    $order                      = function_exists( 'wc_get_order' ) ? wc_get_order( $id ) : null;
                    $is_callable_order_get_meta = $WC_SC_class->is_callable( $order, 'get_meta' );
                    $data                       = ( true === $is_callable_order_get_meta ) ? $order->get_meta( 'sc_coupon_receiver_details' ) : get_post_meta( $id, 'sc_coupon_receiver_details', true );
                    if ( empty( $data ) ) {
                        continue;
                    }
                    $from = ( true === $is_callable_order_get_meta ) ? $order->get_billing_email() : get_post_meta( $id, '_billing_email', true );
                    if ( empty( $generated_coupon_data[ $from ] ) ) {
                        $generated_coupon_data[ $from ] = array();
                    }

                    $TPRM_order_id[] = $order->id;
                    
                    $generated_coupon_data[ $from ] = array_merge( $generated_coupon_data[ $from ], $data );
                }

                $backtrace           = debug_backtrace( DEBUG_BACKTRACE_IGNORE_ARGS );  // phpcs:ignore
                $backtrace_functions = wp_list_pluck( $backtrace, 'function' );
                if ( in_array( 'sc_generated_coupon_data_metabox', $backtrace_functions, true ) ) {
                    reset( $order_ids );
                    $order_id   = current( $order_ids );
                    $from       = $WC_SC_class->get_post_meta( $order_id, '_billing_email', true );
                    $coupon_ids = $wpdb->get_col( // phpcs:ignore
                        $wpdb->prepare(
                            "SELECT DISTINCT p.ID
                                FROM {$wpdb->posts} AS p
                                    LEFT JOIN {$wpdb->postmeta} AS pm
                                        ON (p.ID = pm.post_id)
                                WHERE p.post_type = %s
                                    AND p.post_status = %s
                                    AND pm.meta_key = %s
                                    AND (pm.meta_value = %s
                                            OR pm.meta_value = %d )",
                            'shop_coupon',
                            'future',
                            'generated_from_order_id',
                            $order_id,
                            $order_id
                        )
                    );
                    if ( ! empty( $coupon_ids ) && is_array( $coupon_ids ) ) {
                        foreach ( $coupon_ids as $coupon_id ) {
                            $coupon_receiver_details = $WC_SC_class->get_post_meta( $coupon_id, 'wc_sc_coupon_receiver_details', true );
                            $from                    = ( ! empty( $coupon_receiver_details['gift_certificate_sender_email'] ) ) ? $coupon_receiver_details['gift_certificate_sender_email'] : $from;
                            if ( empty( $generated_coupon_data[ $from ] ) || ! is_array( $generated_coupon_data[ $from ] ) ) {
                                $generated_coupon_data[ $from ] = array();
                            }
                            $generated_coupon_data[ $from ][] = array(
                                'code'     => ( ! empty( $coupon_receiver_details['coupon_details']['code'] ) ) ? $coupon_receiver_details['coupon_details']['code'] : '',
                                'amount'   => ( ! empty( $coupon_receiver_details['coupon_details']['amount'] ) ) ? $coupon_receiver_details['coupon_details']['amount'] : 0,
                                'email'    => ( ! empty( $coupon_receiver_details['gift_certificate_receiver_email'] ) ) ? $coupon_receiver_details['gift_certificate_receiver_email'] : '',
                                'message'  => ( ! empty( $coupon_receiver_details['message_from_sender'] ) ) ? $coupon_receiver_details['message_from_sender'] : '',
                                'order_id' => ( ! empty( $order_id ) ) ? $order_id : 0,
                            );
                        }
                    }
                }

                if ( empty( $generated_coupon_data ) ) {
                    return;
                }

                if ( $html ) {

                    ob_start();
                    if ( 'table' === $layout ) {
                        $WC_SC_class->get_generated_coupon_data_table( $generated_coupon_data );
                    } else {
                        $WC_SC_class->get_generated_coupon_data_box( $generated_coupon_data );
                    }
                    $coupon_details_html_content = ob_get_clean();

                    $found_coupon = ( 'table' === $layout ) ? ( strpos( $coupon_details_html_content, 'coupon_received_row' ) !== false ) : ( strpos( $coupon_details_html_content, '<details' ) !== false );

                    if ( $found_coupon && ! empty( $coupon_details_html_content ) ) {

                        echo '<div id="generated_coupon_data_container">';
                        
                        $printcoupon = '';
                        foreach ($TPRM_order_id as $order_id) {

                            $order = new WC_Order( $order_id );

                            foreach ( $order->get_items() as $item_key => $item ) {
    
                                $product = $order->get_product_from_item( $item );
                                
                                $item_sku = $product->get_sku();

                                $coupon = $generated_coupon_data[$from][0]['code'];
                                
                                    //$item_sku = $product->get_sku();
                                    $coupon_img_path = TPRM_MEM_CO_IMG  . $item_sku .'.png';
                                    $howto_img_path = TPRM_MEM_CO_IMG  . $item_sku .'-howto.png';
                                 
                                    $printcoupon .= '<div class="coupon-container email" >';
                                    $printcoupon .= '   <div class="coupon-container-inner" >';                                                                  
                                    $printcoupon .= '           <div class="code outlook">' . $coupon . '</div>';                  
                                    $printcoupon .= '   </div>';                 
                                    $printcoupon .= '</div>';

                                  
                            }
                        }


                        echo  $printcoupon; // phpcs:ignore
                                       

                        echo '</div>';

                    }
                }

				return;

			}

			return $generated_coupon_data;
		}

        /**
         * Helper function to check if product is access or license
         *
         * @since V2
         * @access public
         * @return String
         */

        public function access_or_license( $order ) {

            $status = $order->get_status();
                        
            // checking if it's the order status we want
            if ( $status == "completed" ||  $status == "processing" ) {
                // the IDs of our VIP products
                $access_products = array( 16423, 16428 );
                $license_products = array( 16422, 16427 );
                        
                // getting the order products
                $items = $order->get_items();
        
                $license_prd = false;
                $access_prd = false;
                        
                // let's loop through each of them
                foreach ( $items as $item ) {   
                    // checking if the ordered product is a access product
                    if ( in_array( $item['product_id'], $access_products ) ) {
                        $access_prd = true;
                    }
                    // or a license product
                    if ( in_array( $item['product_id'], $license_products ) ) {
                        $license_prd = true;
                    }
                }
                            
                if ( $access_prd ) {
                    return 'access';
                }
                if ( $license_prd ) {
                    return 'license';
                }
            }
        
            // Return an empty string if neither access nor license is found
            return '';
        }

        /**
         *  print footer in woocommerce emails
         *
         * @since V2
         * @access public
         * @return Void
         */
        public function TPRM_woocommerce_footer($email){

            $TPRM_email_footer .= '   <div class="woo_email_footer" >';                
            $TPRM_email_footer .= '       <p class="TPRM_footer_border"></p>';           
            $TPRM_email_footer .= '       <p class="TPRM_copyright_footer">' . __('This email was sent to you by ' , 'TPRM_-membership-coupon' ) ; 
            $TPRM_email_footer .= '       <a href="' . home_url('') . '" target="_blank" class="home-page">' . __('tepunareomaori' , 'TPRM_-membership-coupon' ) . '</a></p>';
            $TPRM_email_footer .= '       <div class="footer-bg" style="background-image: url(' . TPRM_MEM_CO_IMG . 'koding-cool.png)">';
            $TPRM_email_footer .= '   </div>';

            echo $TPRM_email_footer;
        }

        /**
         * display order school details on thankyou page
         *
         * @since V2
         * @access public
         * @return Void
         */

        public function display_order_school_details_on_thankyou_page($order_id, $user_id) {
            $order = wc_get_order($order_id);
            $output = ''; 
       
            $product = $this->access_or_license( $order );

            /* 
            * When a user who is not logged he will purshase a license 
            * In this process, we need to transmit the post metadata collected from the checkout input fields that the user has filled out.
            */
            if($product === "license"){
                $ecole = get_post_meta($order_id, '_ecole', true);
                $classe = get_post_meta($order_id, '_classe', true);

                $output .= '<div class="woocommerce-column_school_details">';
                $output .= '<h2 class="woocommerce-column__title">' . __('School details', 'TPRM_-membership-coupon') . '</h2>';
                $output .= '<table style="width: 50%;">'; // Start the table     
                
                if ($ecole) {
                    $output .= '<tr>';
                    $output .= '<td style="font-weight: 600;">' . __('School Name', 'TPRM_-membership-coupon') . '</td>';
                    $output .= '<td>' . esc_html($ecole) . '</td>';
                    $output .= '</tr>';
                }
    
                if ($classe) {
                    $output .= '<tr>';
                    $output .= '<td style="font-weight: 600;">' . __('Class Name', 'TPRM_-membership-coupon') . '</td>';
                    $output .= '<td>' . esc_html($classe) . '</td>';
                    $output .= '</tr>';
                }
    
                $output .= '</table>'; // End the table
                $output .= '</div>';
            }
            /*
            * When a user activate its account
            * In this process, we need to transmit the user metadata collected from the checkout input fields that the user has filled out.
            */
            if($product === "access"){
                $ecole = get_school_details($user_id)[0]['school_name'];
                $classe = get_school_details($user_id)[0]['classe_name'];

                $output .= '<div class="woocommerce-column_school_details">';
                $output .= '<h2 class="woocommerce-column__title">' . __('School details', 'TPRM_-membership-coupon') . '</h2>';
                $output .= '<table style="width: 50%;">'; // Start the table     
                
                if ($ecole) {
                    $output .= '<tr>';
                    $output .= '<td style="font-weight: 600;">' . __('School Name', 'TPRM_-membership-coupon') . '</td>';
                    $output .= '<td>' . esc_html($ecole) . '</td>';
                    $output .= '</tr>';
                }
    
                if ($classe) {
                    $output .= '<tr>';
                    $output .= '<td style="font-weight: 600;">' . __('Class Name', 'TPRM_-membership-coupon') . '</td>';
                    $output .= '<td>' . esc_html($classe) . '</td>';
                    $output .= '</tr>';
                }
    
                $output .= '</table>'; // End the table
                $output .= '</div>';
            }
                     
           
 
            echo $output; // Return the HTML content as a variable
        }

        /**
         *  Include "ecole" and "classe" details in the account details email
         *
         * @since V2
         * @access public
         * @return Void
         */
           
        public function show_school_details_email_order_meta( $order, $sent_to_admin, $plain_text, $email ) {
            
            $product = $this->access_or_license( $order );

            $order_id = $order->get_id();
            $user_id = $order->get_customer_id();
            $user_obj = get_user_by('id', $user_id);
            $output = '';      

            /* 
            * When a user who is not logged he will purshase a license 
            * In this process, we need to transmit the post metadata collected from the checkout input fields that the user has filled out.
            */
            if($product === "license"){
                $ecole = get_post_meta($order_id, '_ecole', true);
                $classe = get_post_meta($order_id, '_classe', true);
                $output .= '<div class="school_details"  style="margin-bottom: 40px;">';
                $output .= '<h2 class="school_details_title">' . __('School Details', 'TPRM_-membership-coupon') . '</h2>';
                    
                $output .= '<div class="school_details_container" style="padding: 12px; color: #636363; border: 1px solid #e5e5e5;">';
            }
            /*
            * When a user activate its account
            * In this process, we need to transmit the user metadata collected from the checkout input fields that the user has filled out.
            */
            if($product === "access"){
                $username = $user_obj->user_login;
                $ecole = get_school_details($user_id)[0]['school_name'];
                $classe = get_school_details($user_id)[0]['classe_name'];
                $output .= '<div class="school_details"  style="margin-bottom: 40px;">';
                $output .= '<h2 class="school_details_title">' . __('School Details', 'TPRM_-membership-coupon') . '</h2>';
                    
                $output .= '<div class="school_details_container" style="padding: 12px; color: #636363; border: 1px solid #e5e5e5;">';
            }
        
           
            if ($username) {
                $output .= '<p>';
                $output .= '<span style="font-weight: 600;">' . __('Username', 'TPRM_-membership-coupon') . ':</span> ';
                $output .= '<span>' . esc_html($username) . '</span>';
                $output .= '</p>';
            }

            if ($ecole) {
                $output .= '<p>';
                $output .= '<span style="font-weight: 600;">' . __('School Name', 'TPRM_-membership-coupon') . ':</span> ';
                $output .= '<span>' . esc_html($ecole) . '</span>';
                $output .= '</p>';
            }

            if ($classe) {
                $output .= '<p>';
                $output .= '<span style="font-weight: 600;">' . __('Class Name', 'TPRM_-membership-coupon') . ':</span> ';
                $output .= '<span>' . esc_html($classe) . '</span>';
                $output .= '</p>';
            }
            $output .= '</div>';

            $output .= '</div>';

            echo $output;
   
        }  

    }

}
/**
 ** End TPRM_membership_email Class*
 */
